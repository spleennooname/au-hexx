SQR.ConvexHull = function () { var t = [], e = [], n = [], r = function (t, e) { return t.x == e.x ? t.y - e.y : t.x - e.x }, a = function (t, e, n) { return n.x * t.y - n.y * t.x - (e.x * t.y - e.y * t.x) + (e.x * n.y - e.y * n.x) < 0 }, o = function (t, e) { e.push(t[0]), e.push(t[1]); for (var n = 2, r = t.length; r > n; n++)for (e.push(t[n]); e.length > 2 && !a(e[e.length - 3], e[e.length - 1], e[e.length - 2]);)e.splice(e.indexOf(e[e.length - 2]), 1); return e }, i = function (t, e) { e.push(t[t.length - 1]), e.push(t[t.length - 2]); for (var n = t.length - 3; n >= 0; n--)for (e.push(t[n]); e.length > 2 && !a(e[e.length - 3], e[e.length - 1], e[e.length - 2]);)e.splice(e.indexOf(e[e.length - 2]), 1); return e }; return { compute: function (a, u) { return u || (u = n), t.length = 0, e.length = 0, u.length = 0, a.sort(r), o(a, t), i(a, e), u = u.concat(t, e) } } }(), SQR.DiscoBall = function (t) { if (!t) throw "> SQR.DiscoBall > Please provide paramerters for construction"; var e = new SQR.Transform("disco-ball"); e.shader = t.shader; var n; return e.buffer = SQR.Buffer().layout({ aPosition: 3, aMul: 1, aPhase: 1, aColor: 3 }, 2 * t.size).iterate("aPosition", function (t, e, r) { var a = r % 2 == 1; a || (n = (new SQR.V3).random().norm()), e[t + 0] = n.x, e[t + 1] = n.y, e[t + 2] = n.z }).iterate("aMul", function (e, n, r) { var a = r % 2 == 1; n[e] = a ? 0 : t.thickness }).iterate("aPhase", function (t, e) { e[t] = 10 * Math.random() }).iterate("aColor", function (e, n, r) { var a = t.colors[r % t.colors.length]; n[e + 0] = a.r, n[e + 1] = a.g, n[e + 2] = a.b }).update(), e }, SQR.GeometryTools = function () { var t = {}; return t.batch = function (t) { var e = [], n = 0, r = function (a) { if (a.transformWorld(), a.numChildren > 0) for (var o = 0; o < a.numChildren; o++)r(a.children[o]); a.buffer && (a.buffer.isIndexed() ? console.warn("> SQR.GeometryTools.batch - indexed buffers can't be batched") : (e.push(a), n += a.buffer.size)), a.shader && !t.shader && (t.shader = a.shader) }; r(t); for (var a = SQR.Buffer().layout(e[0].buffer.layout, n), o = 0, i = 0, u = new SQR.V3, f = new SQR.Matrix33, s = 0, c = 0; c < e.length; c++) { var l = e[c], h = e[c].buffer, d = new Float32Array(h.size * h.strideSize); d.set(h.getDataArray()), h.iterate("aPosition", function (t, e) { u.set(e[t + 0], e[t + 1], e[t + 2], 1), l.globalMatrix.transformVector(u), d[t + 0] = u.x, d[t + 1] = u.y, d[t + 2] = u.z }), h.iterate("aNormal", function (t, e) { u.set(e[t + 0], e[t + 1], e[t + 2]), l.globalMatrix.inverseMat3(f), f.transformVector(u), d[t + 0] = u.x, d[t + 1] = u.y, d[t + 2] = u.z }), a.setRawData(d, o - i), o += h.size * h.strideSize, s++ } return t.removeAll(), t.buffer = a.update(), t }, t }(), SQR.ParticleStream = function (t) { SQR.ParticleStream.buffer || (SQR.ParticleStream.buffer = SQR.Buffer().layout({ aPhase: 1, aOffset: 1, aSpeed: 1 }, t.size).iterate("aPhase", function (t, e) { e[t] = Math.random() }).iterate("aSpeed", function (t, e) { e[t] = .5 + .5 * Math.random() }).iterate("aOffset", function (t, e) { e[t] = 2 * Math.random() - 1 }).update()); var e = SQR.Transform(); return e.shader = t.shader, e.buffer = SQR.ParticleStream.buffer, e.buffer.setMode(SQR.gl.POINTS), e }, SQR.Shapes2d = { circle: function (t, e) { return function (n) { n.beginPath(), n.fillStyle = e, n.arc(0, 0, t, 0, 2 * Math.PI), n.fill() } }, triangleEq: function (t, e) { return function (n) { n.fillStyle = e, n.beginPath(); var r = t; n.moveTo(Math.cos(30 / 180 * Math.PI) * r, Math.sin(30 / 180 * Math.PI) * r), n.lineTo(Math.cos(150 / 180 * Math.PI) * r, Math.sin(150 / 180 * Math.PI) * r), n.lineTo(Math.cos(Math.PI / -2) * r, Math.sin(Math.PI / -2) * r), n.fill() } }, quad: function (t, e, n) { return function (r) { r.fillStyle = n, r.fillRect(t * -.5, e * -.5, t, e) } } }, SQR.SpriteSheet = function () { var t, e, n, r, a = {}, o = document.createElement("canvas"), i = o.getContext("2d"); return a.canvas = o, a.frame = 0, a.layout = function (r, i, u) { return t = r, e = i, n = u, o.width = e * n, o.height = t * n, a.numFrames = t * e, a.rows = t, a.cols = e, a.size = n, a }, a.options = function (t) { return r = t, a }, a.renderToCanvas = function (t, r) { var a = 1 == e ? r : Math.floor(r / e), i = r % e; t.translate(n / -2, n / -2), t.drawImage(o, i * n, a * n, n, n, 0, 0, n, n) }, a.draw = function (o) { if (r && void 0 !== r.bgcolor ? (i.fillStyle = r.bgcolor, i.fillRect(0, 0, e * n, t * n)) : (i.fillStyle = "rgba(0, 0, 0, 0)", i.fillRect(0, 0, e * n, t * n)), !o) return a; for (var u = 0; t > u; u++)for (var f = 0; e > f; f++) { i.save(); var s = r && r.webglFlipY ? (t - u - 1) * n : u * n; i.translate(f * n, s), o.call(this, i, u * e + f), i.restore() } return a }, a.run = function (t, e) { var n = 0, r = e || -1; console.log(r), t = t || 1e3 / 60; var o = function (t) { a.renderToCanvas(t, n) }, i = setInterval(function () { n++ , n >= a.numFrames && (0 != r ? (n = 0, r--) : o.stop()) }, t); return o.stop = function () { clearInterval(i) }, o }, a }, SQR.TextureGenerator = { noise: function (t, e, n, r, a) { t = t || 512, e = e || t, r = r || 0, a = a || 255; var o = n || document.createElement("canvas"); o.width = t, o.height = e; for (var i = o.getContext("2d"), u = i.createImageData(t, e), f = u.data, s = 0, c = f.length; c > s; s += 4)f[s + 0] = r + Math.random() * (a - r) | 0, f[s + 1] = r + Math.random() * (a - r) | 0, f[s + 2] = r + Math.random() * (a - r) | 0, f[s + 3] = 255; return i.putImageData(u, 0, 0), o } }, SQR.Trackball = function () { var t = {}; t.rotation = new SQR.Quaternion; var e = function (t, e, n, r) { n = n || .5, r = r || new SQR.V3; var a = t / n, o = e / n, i = a * a + o * o; return i >= 1 ? r.set(a, o, 0) : r.set(a, o, Math.sqrt(1 - i)), r.norm(), r }, n = 0, r = 0, a = !1, o = new SQR.V3, i = new SQR.V3, u = new SQR.Quaternion, f = window.innerWidth / window.innerHeight, s = function (t) { t = "ontouchstart" in document ? t.targetTouches[0] : t, n = (t.pageX / window.innerWidth * 2 - 1) * f, r = -1 * (t.pageY / window.innerHeight * 2 - 1) }, c = function (t) { a = !0, s(t), e(n, r, 1, o) }, l = function (f) { if (a) { s(f), e(n, r, 1, i); var c = SQR.V3.dot(o, i); o.cross(i, o), u.set(o.x, o.y, o.z, c), t.rotation.mul(u), o.copyFrom(i) } }, h = function () { a = !1 }; return "ontouchstart" in document ? (document.addEventListener("touchstart", c, !1), document.addEventListener("touchmove", l, !1), document.addEventListener("touchend", h, !1)) : (document.addEventListener("mousedown", c, !1), document.addEventListener("mousemove", l, !1), document.addEventListener("mouseup", h, !1)), t }, SQR.WirePlatonic = { pyramid: function (t, e) { var n = .5 * t, r = .5 * t, a = SQR.Buffer().layout(SQR.v3(), 5).data("aPosition", 0, r, 0, -n, -r, n, n, -r, n, -n, -r, -n, n, -r, -n); return e || a.index(0, 1, 0, 2, 0, 3, 0, 4, 1, 3, 2, 4, 1, 2, 3, 4), a }, octahedron: function (t, e) { for (var n = .5 * t, r = Math.PI / 2, a = [], o = 0; 4 > o; o++) { var i = n * Math.cos(o * r), u = n * Math.sin(o * r); a.push(i, u, 0) } a.push(0, 0, n), a.push(0, 0, -n); var f = SQR.Buffer().layout(SQR.v3(), 6).data("aPosition", a); return e || f.index(0, 1, 1, 2, 2, 3, 3, 0, 4, 0, 4, 1, 4, 2, 4, 3, 5, 0, 5, 1, 5, 2, 5, 3), f }, cube: function (t, e) { var n = .5 * t, r = SQR.Buffer().layout(SQR.v3(), 8).data("aPosition", -n, n, n, n, n, n, -n, -n, n, n, -n, n, -n, n, -n, n, n, -n, -n, -n, -n, n, -n, -n); return e || r.index(0, 1, 0, 2, 1, 3, 2, 3, 4, 5, 4, 6, 5, 7, 6, 7, 0, 4, 1, 5, 2, 6, 3, 7), r }, dodecahedron: function (t, e) { var n = .5 * t, r = (1 + Math.sqrt(5)) / 2, a = n * r, o = n * (1 / r), i = SQR.Buffer().layout(SQR.v3(), 20).data("aPosition", -n, n, n, n, n, n, -n, -n, n, n, -n, n, -n, n, -n, n, n, -n, -n, -n, -n, n, -n, -n, 0, o, a, 0, -o, a, 0, o, -a, 0, -o, -a, -a, 0, o, -a, 0, -o, a, 0, o, a, 0, -o, -o, a, 0, o, a, 0, o, -a, 0, -o, -a, 0); return e || i.index(8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 8, 0, 8, 1, 9, 2, 9, 3, 10, 4, 10, 5, 11, 6, 11, 7, 12, 0, 12, 2, 13, 4, 13, 6, 14, 1, 14, 3, 15, 5, 15, 7, 16, 0, 16, 4, 17, 1, 17, 5, 18, 3, 18, 7, 19, 2, 19, 6), i }, icosahedron: function (t, e) { var n = .5 * t, r = .5 * (1 + Math.sqrt(5)) * n, a = [], o = function (t, e, r) { var o = new SQR.V3(t, e, r).norm().mul(n); a.push(o.x, o.y, o.z) }; o(-n, r, 0), o(n, r, 0), o(-n, -r, 0), o(n, -r, 0), o(0, -n, r), o(0, n, r), o(0, -n, -r), o(0, n, -r), o(r, 0, -n), o(r, 0, n), o(-r, 0, -n), o(-r, 0, n); var i = SQR.Buffer().layout(SQR.v3(), 12).data("aPosition", a); return e || i.index(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 5, 1, 5, 0, 7, 1, 7, 2, 6, 3, 6, 2, 4, 3, 4, 8, 1, 8, 3, 10, 0, 10, 2, 9, 1, 9, 3, 11, 0, 11, 2, 8, 6, 8, 7, 10, 6, 10, 7, 9, 4, 9, 5, 11, 4, 11, 5), i } };